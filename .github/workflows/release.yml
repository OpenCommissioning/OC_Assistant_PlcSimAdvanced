name: Release

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Versionize
      run: dotnet tool install --global Versionize

    - name: Setup git
      run: |
        git config --global user.email opencommissioning@spiratec.com
        git config --global user.name "oc-bot"
      
    - name: Versioning
      id: versionize
      run: versionize
      continue-on-error: true

    - name: Get current version
      if: steps.versionize.outcome == 'success'
      run: echo "VERSION=v$(versionize inspect)" >> $GITHUB_ENV

    - name: Get current changelog
      if: steps.versionize.outcome == 'success'
      run: echo "$(versionize changelog)" > latest_changelog.md
      
    #- name: Create api dependency from secret
    #  run: |
    #    $secretFile = "OC.PlcSimAdvanced/Siemens.Simatic.Simulation.Runtime.Api.x64.dll"; 
    #    $encodedBytes = [System.Convert]::FromBase64String($DLL); 
    #    Set-Content $secretFile -Value $encodedBytes -AsByteStream;         
    #  shell: pwsh
    #  env:
    #    SECRET_DATA1: ${{ secrets.B64_SECRET1 }}
        
    - name: Create api dependency from secret
      uses: timheuer/base64-to-file@v1.2
      with:
        fileName: 'Siemens.Simatic.Simulation.Runtime.Api.x64.dll'
        fileDir: './OC.PlcSimAdvanced'
        encodedString: $DLL
        
    - name: Dotnet build
      if: steps.versionize.outcome == 'success'
      run: dotnet build OC.PlcSimAdvanced --configuration release --output ./
    
    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true

    - name: Publish new release
      if: steps.versionize.outcome == 'success'
      run: |
        gh release create ${{env.VERSION}} -t "Release ${{env.VERSION}}" -F latest_changelog.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create zip file
      uses: montudor/action-zip@v1
      with:
        args: zip -qq -r ./OC.Assistant_${{env.VERSION}}.zip ./OC.PlcSimAdvanced.dll

    - name: Upload release artifact
      if: steps.versionize.outcome == 'success'
      run: |
        gh release upload ${{env.VERSION}} ./OC.Assistant_${{env.VERSION}}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
